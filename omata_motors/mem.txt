//------------------------------------------------------------------------------
//	omata_motors.wjg.jp/
//	kurachano.mydns.jp/~omata_motors/
//	
// 主にシェルスクリプト、PHP、JavaScriptに対しての説明。忘れそうだから。
//------------------------------------------------------------------------------

1 はじめに
	1-1) はじめに。

2 パーミッション設定について
	2-1)その他+r 読み込み許可
	2-2)その他+w 書き込み許可
	2-3)その他+x 実行許可

3 シェルスクリプト
	3-1) cal_sys/
	3-2)

4 PHP
	4-1) 共通関数ファイル	/script/config.php, sql_config.php
	4-2) 管理画面			/script/admin/index.php
	4-3) カレンダー管理		/script/admin/cal.php
	4-4) 新着情報			/script/admin/info.php
	4-5) 中古車管理			/script/admin/used.php
	4-6) リンク管理			/script/admin/link.php
	4-7) トピック管理		/script/admin/topic.php
	4-8) 統計情報			/script/admin/statistics.php

5 JavaScript 
	5-1) js_chk.js
	5-2) img_cha.js
	5-3)

6 MySQL
	6-1) main_table
	6-2) access_count
	6-3) maker_code
	6-4) class_code
	6-5) maker_code

//------------------------------------------------------------------------------

1) はじめに

	public_html/以下をftp、httpでのルートとする。
	/home/user/shell_scr/以下にそれぞれのシェルスクリプト群を配置。
	public_html/script/以下にPHP、JavaScriptファイルを配置。
	それぞれのスクリプトにコメントがあるので、参照されたし。
	ここでは大体の処理を説明する。

//------------------------------------------------------------------------------

2 パーミッション設定について

基本的にファイルもディレクトリもデフォルト値で設定しておく。
ファイル:644 ディレクトリ:755
ここでは特別に設定が必要な部分を説明する。ディレクトリの場合は頭に<dir>を付けておくので、参照するときには注意されたし。

2-1)その他+r 読み込み許可


2-2)その他+w 書き込み許可
･<dir> /script/
  カレンダー、更新履歴破損時にPHPで新規作成可能にするため。本当はちょっと怖い。
･<dir> /used/
  中古車情報を保存するディレクトリ。PHPで出力、消去する権限が必要。
･カレンダーファイル
  出力したファイル自体のオーナーはシェルスクリプトを実行したユーザーである。
  シェルスクリプトの処理にその他への書き込み権限付加は入っているが、一応注意。
･更新履歴ログファイル
  カレンダーと違い、シェルスクリプトとは関係ないので注意。
  ファイル破損時に外部から作成したときのパーミッションに注意。ファイルが存在しない場合はPHP側で作成する。

2-3)その他+x 実行許可
･/script/admin/cal_reset.sh
  カレンダーのリセットをPHPを経由して行うため。

//------------------------------------------------------------------------------

3 シェルスクリプト

PHPから動作させるにはパスの指定が出来ないので、絶対パスでシェルスクリプトを指定したファイルを作り、間接的にshell_exec("./**.sh");などで実行させる。
実行させるPHP自身のパーミッションも注意しておくこと。その他+xで。

3-1) cal_sys/
カレンダーシステム。カレンダーファイルの出力を行う。形式はHTML形式のテーブルタグ。<table>は出力されずに、<td>からの出力になる。休日の挿入はPHPを使い、そのファイル自体を編集する形を取る。
･cal_utl.sh
  基本的にこのシェルスクリプトに対して引数を送って実行する。
  設定ファイルは別途のcal_utl.confに記述
  cronで毎月更新するようにすると(ﾟдﾟ)ｳﾏｰ
  cal_creator、cal_utl.confを外部関数として読み込んでいる。
	reset:		カレンダーのリセット。休日もリセットされる。
	chan_mon:	月が変わったときに使う。
				来月→今月、再来月→来月にリネームして、再来月を生成

･cal_utl.conf
  カレンダーファイルの名前の定義と、格納場所の定義。
  基本的な設定はこのファイルの設定で行う。
  変更した場合については、PHPファイル側の変更も必要である。

･cal_creator
  TAGGING(str int int)
	cal_utl.shから送られた引数によって、カレンダーを生成する。
	設定ファイルは別途のcal_utl.confに記述する。
	引数は3つまで必要であり、｢書きだすファイル名、月、年｣を送る必要がある。
	最後に出力したファイルのパーミッションを変更する。

---追補---
･cal_utl.sh
  あくまで引数で処理を分岐させるだけの役割。

･cal_creator
  書きだすファイル名はcal_utl.shから送られてきたものを使用する。


3-2)

//------------------------------------------------------------------------------
4 PHP

/script直下に出力ファイル、共通関数ファイルを配置。
/script/admin/以下は.htaccessにて制限をかけているので、そこでスクリプトを実行する。

4-1) 共通関数ファイル
･config.php。これに共通変数。
  カレンダー、お知らせファイルの名前定義。基本的に変更する必要はない。カレンダーファイル名を変更する場合はシェルスクリプト側と同じ名称にすること。
  基本的にルートディレクトリから読み込まれる前提なので、ルート以外で読み込みたい場合は注意しましょう。
	read_cal($fnm) どのファイルを読み込ませるかちゃんと引数を指定しましょう。
	read_info() お知らせファイルは上で定義してるので、グローバル変数で取得し、読み込ませる。引数入らずでいい子。
	topic() 上記のread_infoと同じく、ファイル名は上で定義。グローバル変数として取得し出力だが、ファイルが存在しない場合は実行しない。
	link_read() 毎度おなじみインクルードである。

･sql_config.php
  データベースアクセスに必要な変数定義。
	
4-2) 管理画面
･index.php
  他の管理画面へのリンク集。
  .htaccessで/admin/以下のディレクトリにアクセス制限をしている。HTTPのベーシック認証でどうぞ。phpinfoのリンクもあるよ。

4-3) カレンダー管理
･cal.php
  カレンダーファイル編集画面。フォームで自分自身にPOSTし、後述のcal.inc.phpへ引数を渡す。
  $upがNULLだった場合は処理をスキップする。初回読み込み対策。

･cal.inc.php
  ユーザー定義関数ファイル。カレンダーの読み出し、カレンダーファイルの編集が出来る。
  外部ファイルは拡張子incらしいが、phpはphpでないとダメらしいので(実行はできる)二重拡張子で。

  cal_edit($day,$mon,$sch,$up)
	2桁の数字と隠し属性に update が送られていることが条件になっている。
	シェルスクリプト側のcal_utl.confファイルのカレンダーファイル名が変更されている場合はこちらもきちんと対応箇所を変更しておくこと。
	リセットを行う場合は月指定は不可。(面倒なので)
	シェルスクリプトのcal_creatorを直接実行すれば可能ではある。シェルスクリプトcal_utl側でも引数を増やせば可能ではある。
	引数$upに reset が入っている場合はshell_execを使用して、下記のcal_reset.shをカレンダーのリセットを行う。
	書き換え時にカレンダーファイルが1つでも存在しないときは強制的にリセットをかける。面倒だからこれで行く。
	この場合は、リセットを行うだけなのでファイル自体の書き換えはしないので注意汁。

･cal_reset.sh
  httpのルートがpublic_htmlなのでシェルスクリプトが実行できない。
  シェルスクリプト絶対パスで指定したら行けるだろう。と思ったら行けた。
  シェルスクリプトなので、リセットついでになにかやりたい場合は追記出来るはず。パーミション注意。その他+xでおk。
  ついついコピーしちゃうけど、記述には注意ね。シェルスクリプト別々だから。

4-4) 新着情報
･info.php
  新着情報編集画面。フォームで自分自身にPOSTし、後述のinfo.inc.phpへ引数を渡す。
  $upがNULLだった場合は処理をスキップする。初回読み込み対策。

･info.inc.php
  ユーザー定義関数ファイル。新着情報ファイル読み出し、新着情報ファイルの追記ができる
  外部ファイルは拡張子incらしいが、phpはphpでないとダメらしいので(実行はできる)二重拡張子で。

  info_w()
	引数いらない。というのも送られた変数はグローバル変数で持ってくるから。引数でもいいかも。
	既存ファイルから4行orEOFまで読み込み。変数内に格納した後、ファイルを新規作成して一番上に送られてきたテキスト
	そして変数内の文字列を書き込むナイスガイ。
	ファイルが存在しない場合は新規作成を試みるが、パーミッションとかファイルが壊れてたら悲惨でしょうね。

4-5) 中古車管理
･used.php
  入力フォーム、修正フォームなど備える。自分自身にPOSTし、後述のused.inc.phpを実行
  alt_dbの値によって処理内容を分岐させる。
   "db_insert"の場合
	はじめにデータベースへ入力項目を挿入、戻り値にて追加車種のIDを取得後、それをもとにファイル生成。
	車体左側、車体右側、メーターは必須なので、強制的に3つの画像生成実行。
	その他の画像に関して、name属性の"etc_x(数字カウント)"の存在を取得し、配列に格納。後述の関数が配列の数で処理を分岐せる。
  "db_delete"の場合
	データベース削除を実行
  "db_update"の場合
	データベース更新を実行

.used.inc.php
  このサイトの核。と言ってもいいくらい重要なファイル。
  画像ファイルのサイズ定義、画像アップロード先定義。画像編集関数定義、データベース挿入関数定義、データベース削除関数定義、データベース変更関数定義。
  中古車情報はこれで全て処理する。

  img_cre($img,$id)
	イメージクリエイター。
	$imgは画像のname属性値が入る。その他の画像の場合は前述のused.phpの時点で、配列格納されているので、配列の要素数で処理を分岐
	二枚以上の場合($img[]の要素数が複数の場合)、アップロードされたファイルを指定の半分のサイズに縮小して指定位置挿入して出力。
	1枚画像の場合、指定の大きさに変形させて出力。要素数が1でも引き出すときは[0]なので先にデクリメント処理。
	車体左右、メーターは引数が変数ではないので、別の処理をする。

  insert_db()
	データベースにインサートする。
	この変数内でPOST内容を取得し、NULLだった場合指定文字へ変換してからデータベースに挿入。
	また、排気量からクラスコードを自動生成する。挿入項目が数値以外の文字列だった場合、SQL分に''を付けないとエラーとなり失敗する。
	戻り値として、挿入したデータのIDを返す。

  del_db() 
	指定されたIDのデータベースを削除する。メインテーブル、アクセスカウントから削除。
	その後、アップロードディレクトリからIDに該当するファイルの存在があった場合に削除を実行する。

  used_comment($id)
	引数で渡されたIDに対するコメントを生成する。
	コメントが空っぽだったら生成しない。改行コードを<br />へ変換して指定ディレクトリへァイル出力。

  db_update() 
	指定IDの指定項目の修正。
	値段指定がなくなった場合への文字列変換を行う。
	空白でも処理をしてしまうかもしれないので、IDと入力項目の空白チェックを行い、両方に入力があった場合処理をおこなう。
	また、排気量変更があった場合、クラスコードも再生成し、データベース更新をする

4-6) リンク管理
･link.php
  自身へPOST。updateがupdateだった場合処理を実行

･link.inc.php
  名前、コメント、URLを取得後ファイルに書きだす。
  書きだされるファイルは、tableタグのない<tr><td><a href="URL">名前</a></td><td>コメント</td></tr>
  1行にまとめて記述される。指定行で指定項目を削除できるかも。

4-7) トピック管理
･topic.php
  自身へPOST。updateがupdateだった場合処理を実行。 割と新着情報流用しまくってる。空エンター対策あり。
  トピックファイルが存在するとトップページに<div></div>が出力されるので、消去したい場合は消去をクリック。

･topic.inc.php
  トピックに関する関数定義
   topic_w()
	ファイルのオープンモードはw+。既存の文章は上書きする。1つで十分ですから。追記する場合は今の文章をコピーしてね。
   topic_d()
	トピックファイルを消します。

4-8) 統計情報
･statistics.php
  データベースのアクセス統計アクセス。
  車種名とカウントは別々の関数で取得するので注意。

･statistics.inc.php
  アクセスカウントデータベースへアクセス。

//------------------------------------------------------------------------------
4 JavaScript

4-1) js_chk.js

･js_chk
 JavaScriptの有効無効をチェックするのに有効。
	HTML <img src="./off.gif" name="js_chk">
	js   src="./img/js_on.gif";
 JavaScriptがオフの時はHTML側のソース。オンの時にはjsファイル指定のソースが読み込まれる。

4-2) img_cha.js

･imgcha
 画像を切り替えるスクリプト。
	HTML  < onclick="imgcha('./change.jpg')">
          <img src="./def.jpg" name="space">
	js    imgcha(ado){document.space.src=ado;}
 onclick部はでもonMouseOverでも可能。クリックで実行か、マウスオーバで実行かの違い。
 クリックorマウスオーバーされた場合、送られてきた引数のソースファイルに切り替える。引数をちゃんと贈ってあげましょう。
 width、height指定がある場合は、引き継がれる。

4-3)